# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'nsxt'
on:
  push:
    branches:
    - 'fw-main'
  #pull_request:
  #  paths:
  #      - "**.tf"
  #      - "**.go"
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
jobs:
  pre_run:
    name: 'setup-gh-workers'
    permissions:
      id-token: write
      contents: read
    runs-on: 'ubuntu-latest'
    steps:
    - name: Clone repo
      uses: actions/checkout@master
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }} # this is the output provider_name from the TF module
        service_account: ${{ secrets.SVC_ACCOUNT_EMAIL }} # this is a SA email configured to create gh-runner MIGs
        export_environment_variables: false
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.2
        terraform_wrapper: false
    - name: Set Secrets
      id: secrets
      run: |
        bash test/setup/github-runners/scripts/fetch_vsphere_secrets.sh \
          ${{ steps.auth.outputs.project_id }} \
          ${{ steps.auth.outputs.credentials_file_path }} \
          ${{ secrets.SVC_ACCOUNT_EMAIL }} \
          ${{ secrets.VSPHERE_SERVER_SECRET }} \
          ${{ secrets.VSPHERE_USER_SECRET }} \
          ${{ secrets.VSPHERE_PASSWORD_SECRET }} \
          ${{ secrets.NSXT_SERVER_SECRET }} \
          ${{ secrets.NSXT_USER_SECRET }} \
          ${{ secrets.NSXT_PASSWORD_SECRET }}
      shell: bash
    - name: Terraform Init
      id: init
      run: |
        echo "bucket=\"${{ secrets.TF_BACKEND_BUCKET }}\"" > backend.tfvars
        terraform init -backend-config=backend.tfvars
      working-directory: ./test/setup/github-runners # Use your environment folder
      shell: bash
    - name: Terraform Plan
      id: plan
      run: |
        echo ${{ secrets.GH_RUNNER_TFVAR }} | base64 -d > terraform.tfvars
        terraform plan
      working-directory: ./test/setup/github-runners # Use your environment folder
      shell: bash
    #- name: Terraform Destroy
    #  id: destroy
    #  run: |
    #    echo ${{ secrets.GH_RUNNER_TFVAR }} | base64 -d > terraform.tfvars
    #    terraform destroy -auto-approve && terraform destroy -auto-approve && sleep 5
    #  working-directory: ./test/setup/github-runners # Use your environment folder
    #  shell: bash
    - name: Terraform Apply
      id: apply
      run: |
        echo ${{ secrets.GH_RUNNER_TFVAR }} | base64 -d > terraform.tfvars
        terraform apply -auto-approve
      working-directory: ./test/setup/github-runners # Use your environment folder
      shell: bash
  run_nsxt_stage:
    name: 'run_nsxt_stage'
    needs: pre_run
    permissions:
      id-token: write
      contents: read
    runs-on: 'self-hosted'
    container:
      image: gcr.io/cloud-foundation-cicd/cft/developer-tools:1
    steps:
    - name: Clone repo
      uses: actions/checkout@master
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }} # this is the output provider_name from the TF module
        service_account: ${{ secrets.SVC_ACCOUNT_EMAIL }} # this is a SA email configured to create gh-runner MIGs
        export_environment_variables: false
    - name: Set Secrets
      id: secrets
      run: |
        bash test/setup/github-runners/scripts/fetch_vsphere_secrets.sh \
          ${{ steps.auth.outputs.project_id }} \
          ${{ steps.auth.outputs.credentials_file_path }} \
          ${{ secrets.SVC_ACCOUNT_EMAIL }} \
          ${{ secrets.VSPHERE_SERVER_SECRET }} \
          ${{ secrets.VSPHERE_USER_SECRET }} \
          ${{ secrets.VSPHERE_PASSWORD_SECRET }} \
          ${{ secrets.NSXT_SERVER_SECRET }} \
          ${{ secrets.NSXT_USER_SECRET }} \
          ${{ secrets.NSXT_PASSWORD_SECRET }}
      shell: bash
    - name: Tags - Terraform Init
      id: tagsinit
      run: |
        terraform init
      working-directory: ./examples/nsxt-policy-group
      shell: bash
    - name: Tags - Terraform Plan
      id: tagsplan
      run: |
        cp terraform.tfvars.example terraform.tfvars
        terraform plan -out=plan.out
      working-directory: ./examples/nsxt-policy-group
      shell: bash
    - name: Tags - Terraform Apply
      id: tagsapply
      run: |
        terraform apply plan.out
      working-directory: ./examples/nsxt-policy-group
      shell: bash
    - name: NSX-T Stage - Terraform Init
      id: init
      run: |
        terraform init
      working-directory: ./stages/02a-nsxt # Use your environment folder
      shell: bash
    - name: NSX-T Stage - Terraform Plan
      id: plan
      run: |
        cp nsxt.tfvars terraform.tfvars
        terraform plan -out=plan.out
      working-directory: ./stages/02a-nsxt # Use your environment folder
      shell: bash
    - name: NSX-T Stage - Terraform Apply
      id: apply
      run: |
        terraform apply plan.out
      working-directory: ./stages/02a-nsxt # Use your environment folder
      shell: bash
  post_run:
    name: 'cleanup-gh-workers'
    needs: run_nsxt_stage
    permissions:
      id-token: write
      contents: read
    runs-on: 'ubuntu-latest'
    steps:
    - name: Clone repo
      uses: actions/checkout@master
    - id: 'auth'
      uses: 'google-github-actions/auth@v0.4.0'
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_POOL_PROVIDER_NAME }} # this is the output provider_name from the TF module
        service_account: ${{ secrets.SVC_ACCOUNT_EMAIL }} # this is a SA email configured to create gh-runner MIGs
        export_environment_variables: false
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.2
        terraform_wrapper: false
    - name: Set Secrets
      id: secrets
      run: |
        bash test/setup/github-runners/scripts/fetch_vsphere_secrets.sh \
          ${{ steps.auth.outputs.project_id }} \
          ${{ steps.auth.outputs.credentials_file_path }} \
          ${{ secrets.SVC_ACCOUNT_EMAIL }}
      shell: bash
    - name: Terraform Init
      id: init
      run: |
        echo "bucket=\"${{ secrets.TF_BACKEND_BUCKET }}\"" > backend.tfvars
        terraform init -backend-config=backend.tfvars
      working-directory: ./test/setup/github-runners # Use your environment folder
      shell: bash
#
#    - name: Terraform Destroy
#      id: destroy
#      run: |
#        echo ${{ secrets.GH_RUNNER_TFVAR }} | base64 -d > terraform.tfvars
#        terraform destroy -auto-approve
#      working-directory: ./test/setup/github-runners # Use your environment folder
#      shell: bash
