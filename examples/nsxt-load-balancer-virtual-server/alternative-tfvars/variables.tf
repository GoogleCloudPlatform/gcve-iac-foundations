/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

variable "nsxt_url" {
  description = "The URL of the NSX-T endpoint"
  type        = string
}

variable "nsxt_user" {
  description = "The username used to connect to the NSX-T endpoint. Must be an admin user"
  type        = string
  sensitive   = true
}

variable "nsxt_password" {
  description = "The password for the NSX-T user"
  type        = string
  sensitive   = true
}

variable "nsxt_load_balancer_virtual_server_config" {
  description = "NSXT Load Balancer Virtual Server Config"
  type = object({
    display_name               = string
    enabled                    = bool
    access_log_enabled         = bool
    log_significant_event_only = bool
    ip_address                 = string
    ports                      = list(number)
    default_pool_member_ports  = list(number)
    persistence_profile_path   = string
    max_concurrent_connections = number
    max_new_connection_rate    = number
    tags                       = map(string)
    access_list_control = object({
      enabled    = bool
      action     = string
      group_path = string
    })
    client_ssl = object({
      default_certificate_path = string
      client_auth              = string
      certificate_chain_depth  = number
      ca_paths                 = list(string)
      crl_paths                = optional(list(string))
      sni_paths                = optional(list(string))
      ssl_profile_path         = string
    })
    server_ssl = object({
      server_auth             = string
      certificate_chain_depth = number
      ca_paths                = list(string)
      client_certificate_path = string
      ssl_profile_path        = string
    })
    rules = map(object({
      match_strategy = string
      phase          = string
      conditions = list(map(object({
        method  = string
        inverse = bool
        }
      )))
      actions = list(map(object({
        redirect_status = number
        redirect_url    = string
        }
      )))
    }))
  })
}