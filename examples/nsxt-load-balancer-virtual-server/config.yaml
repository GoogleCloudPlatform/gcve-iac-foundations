---
nsxt:
  display_name: example-virtual-server
  enabled: true
  access_log_enabled: true
  log_significant_event_only: true
  ip_address: 192.168.1.100
  ports:
    # Multiple ports not supported by L7 application profiles
    - 80
    # - 443
  # This is the default port used if the server pool members do not have ports specified
  # If specified this must match the ports definition above
  default_pool_member_ports:
    # Multiple ports not supported by L7 application profiles
    - 80
    # - 443
  # Needs a data lookup
  persistence_profile_path: foo
  max_concurrent_connections: 10
  max_new_connection_rate: 20
  tags:
    env: dev
  # See https://developer.vmware.com/apis/nsx-vmc-policy/latest/data-structures/LBRule/
  # Only supported with L7 LB
  # Actions must be supported by the rule phase
  # https://github.com/vmware/terraform-provider-nsxt/blob/master/nsxt/resource_nsxt_policy_lb_virtual_server.go
  access_list_control:
    enabled: false
    action: ALLOW
    group_path: foo_path
  client_ssl:
    # default_certificate_name: example.com # Use nsxt_policy_certificate
    default_certificate_path: /infra/certificates/example.com # Use nsxt_policy_certificate
    client_auth: IGNORE
    certificate_chain_depth: 3
    ca_paths:
      - /infra/certificates/ca-example
      - /infra/certificates/ca-otherexample
    # crl_paths:
    # sni_paths:
    ssl_profile_path: /infra/lb-client-ssl-profiles/default-high-security-client-ssl-profile
  server_ssl:
    server_auth: IGNORE
    certificate_chain_depth: 3
    ca_paths:
      - /infra/certificates/ca-example
      - /infra/certificates/ca-otherexample
    client_certificate_path: /infra/certificates/example.com
    ssl_profile_path: /infra/lb-server-ssl-profiles/default-high-security-server-ssl-profile
  # Rules are not supported with an L4 application profile
  rules:
    example_rule:
      match_strategy: ALL
      # HTTP_REQUEST_REWRITE, HTTP_FORWARDING, HTTP_RESPONSE_REWRITE, HTTP_ACCESS or TRANSPORT
      phase: HTTP_FORWARDING
      conditions:
        - http_request_method:
            method: GET
            inverse: false
        # - http_ssl:
        #   client_certificate_issuer_dn:
        #     issuer_dn: some-dn
        #     case_sensitive: false
        #     match_type: "REGEX"
        #   client_certificate_subject_dn:
        #     subject_dn: some-dn
        #     case_sensitive: false
        #     match_type: "REGEX"
        #   client_supported_ssl_ciphers:
        #     - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        #     - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
        #     - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        #   session_reused: IGNORE
        #   used_protocol: SSL_V3
        #   used_ssl_cipher: TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
        #   inverse: false
        # - ip_header:
        #     source_address: "1.1.1.1"
        #     # Need to figure out how to refer to this (Is a group even possbile to configure in TF)
        #     group_path: "some_nsx_path"
        #     inverse: false
        # - tcp_header:
        #     source_port: 8080
        #     inverse: false
        # - http_request_version:
        #     version: HTTP_VERSION_1_1
        #     inverse: false
        # - variable:
        #     variable_name: somevar
        #     variable_value: someval
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - http_response_header:
        #     header_name: x-gcp-sample-header
        #     header_value: gcp-is-best
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - http_request_header:
        #     header_name: x-gcp-sample-header
        #     header_value: gcp-is-best
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - http_request_cookie:
        #     cookie_name: some-cookie
        #     cookie_value: some-cookie-value
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - http_request_uri:
        #     uri: http://foo.com/boo
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - http_request_uri_arguments:
        #     uri_arguments: foo1=bar1&foo2=bar2
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - http_request_body:
        #     body_value: "xyz"
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
        # - ssl_sni:
        #     sni: "example.com"
        #     match_type: "REGEX"
        #     case_sensitive: true
        #     inverse: false
      actions:
        - http_redirect:
            redirect_status: 301
            redirect_url: http://example.com
        # - jwt_auth:
        #     key:
        #       # certificate_path: foo_path
        #       public_key_content: somepubkey
        #     pass_jwt_to_pool: true
        #     realm: example.com
        #     tokens:
        #       - token1
        #       - token2
        # - ssl_mode_selection:
        #    ssl_mode: SSL_PASSTHROUGH
        # - http_request_uri_rewrite:
        #     uri: http://foo.example.com
        #     uri_arguments: foo1=bar1&foo2=bar2
        # - http_request_header_rewrite::
        #     header_name: x-gcp-sample-header
        #     header_value: gcp-is-best
        # - http_request_header_delete:
        #     header_name: x-gcp-sample-header
        #     header_value: gcp-is-best
        # - variable_assignment:
        #     variable_name: foovar
        #     variable_value: foo_val
        # - http_response_header_rewrite:
        #     header_name: x-gcp-sample-header
        #     header_value: gcp-is-best
        # - http_response_header_delete:
        #     header_name: x-bad-header
        # - variable_persistence_learn:
        #     variable_name: foovar
        #     persistence_profile_path: foo_path
        #     variable_hash_enabled: false
        # - http_redirect:
        #     redirect_status: 302
        #     redirect_url: http://other-example.com
        # - http_reject:
        #     reply_status: 403
        #     reply_message: "unauthorized"
        # - select_pool:
        #   # This is confusing because the api asks for id but wants path
        #     pool_id: "foo1"
        # - variable_persistence_on:
        #     variable_name: foo
        #     variable_hash_enabled: true
        #     persistence_profile_path: somepath
        # - connection_drop: