# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import requests

def _get_offline_workers(auth_token,owner,repo):
    offline_workers = []
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/runners"
    headers = {
        "Authorization" : f"Bearer {auth_token}",
        "Accept" : "application/vnd.github+json"
    }
    r = requests.get(url,headers=headers)
    if r.status_code != 200:
        print("Error Unable to list Self hosted runners")
        print(f"Error : {r.text}")
        sys.exit(1)
    worker_info=r.json()
    if worker_info['total_count'] > 0 :
        for each_worker in worker_info['runners']:
            if each_worker['status'] != 'online':
                offline_workers.append(each_worker)
    return offline_workers

def delete_worker(auth_token,owner,repo,worker_id):
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/runners/{worker_id}"
    headers = {
        "Authorization" : f"Bearer {auth_token}",
        "Accept" : "application/vnd.github+json"
    }
    r = requests.delete(url,headers=headers)
    if r.status_code != 204:
        print(f"Error Unable to delete Self hosted runner with id {worker_id}")
        print(f"Error : {r.text}")
        sys.exit(1)
    return True

def main():
    parser = argparse.ArgumentParser(description='GH Worker Status Poller')
    parser.add_argument('--auth_token',help='Github Auth Token',required=True)
    parser.add_argument('--repo_owner',help='Github Repo Owner',required=True)
    parser.add_argument('--repo',help='Github repo',required=True)
    args = parser.parse_args()
    offline_workers = _get_offline_workers(
        args.auth_token,
        args.repo_owner,
        args.repo
    )
    if len(offline_workers) == 0:
        print("No Offline Self hosted runners found !")
    for each_worker in offline_workers:
        print(f"Deleting Self hosted runner with id {each_worker['id']}")
        delete_worker(
            args.auth_token,
            args.repo_owner,
            args.repo,
            each_worker['id']
        )

if __name__ == '__main__' :
    main()