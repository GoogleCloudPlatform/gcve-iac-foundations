/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nsxt_segment

import (
	"os"
	"strconv"
	"testing"

	api "github.com/vmware/go-vmware-nsxt"
	"github.com/vmware/go-vmware-nsxt/manager"

	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/tft"
	"github.com/stretchr/testify/assert"
)

func TestNsxtSegment(t *testing.T) {
	insecure, _ := strconv.ParseBool(os.Getenv("NSXT_ALLOW_UNVERIFIED_SSL"))
	username := os.Getenv("NSXT_USERNAME")
	password := os.Getenv("NSXT_PASSWORD")
	host := os.Getenv("NSXT_MANAGER_HOST")
	projects_backend_bucket := os.Getenv("TF_BACKEND_BUCKET")

	backendConfig := map[string]interface{}{
		"bucket": projects_backend_bucket,
	}

	cfg := api.Configuration{
		BasePath: "/api/v1",
		Host:     host,
		Scheme:   "https",
		UserName: username,
		Password: password,
		Insecure: insecure,
	}

	nsxClient, err := api.NewAPIClient(&cfg)
	if err != nil {
		panic(err)
	}

	bpt := tft.NewTFBlueprintTest(t,
		tft.WithBackendConfig(backendConfig),
	)

	bpt.DefineVerify(func(assert *assert.Assertions) {

		var (
			logicalSwitch           manager.LogicalSwitch
			logicalSwitchSubnetCidr string
		)

		bpt.DefaultVerify(assert)
		ns_path := bpt.GetStringOutput("nsxt_segment_path")

		// list out all logical switches using Manager APIs
		lswitches, _, err1 := nsxClient.LogicalSwitchingApi.ListLogicalSwitches(nsxClient.Context, nil)
		if err1 != nil {
			panic(err1)
		}

		// Identify which logical switch is created as part of segment creation
		for _, ls := range lswitches.Results {
			for _, tag := range ls.Tags {
				if tag.Scope == "policyPath" && tag.Tag == ns_path {
					logicalSwitch = ls
				}
			}
		}

		for _, t := range logicalSwitch.Tags {
			if t.Scope == "subnet-cidr" {
				logicalSwitchSubnetCidr = t.Tag
			}
		}

		assert.Equal("example-vm-segment", logicalSwitch.DisplayName, "Segment Display Name should be same")
		assert.Contains("10.50.0.0/24", logicalSwitchSubnetCidr, "Logical Switch should contain segment CIDR")
		assert.Equal("nsx_policy", logicalSwitch.CreateUser, "Logical Switch should be created by Segments(Policy)")
	})

	bpt.Test()
}
