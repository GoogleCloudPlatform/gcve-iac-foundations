/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vcenter_resource_pool

import (
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"testing"

	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/tft"
	"github.com/stretchr/testify/assert"
)

type Vsphere struct {
	Vsphere_server   string
	Vsphere_user     string
	Vsphere_password string
}

func basicAuth(username, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}

func (v *Vsphere) createSession() string {
	url := fmt.Sprintf("http://%s/api/session", v.Vsphere_server)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	req, err := http.NewRequest("POST", url, nil)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Authorization", "Basic "+basicAuth(v.Vsphere_user, v.Vsphere_password))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	return string(body)
}

func (v *Vsphere) getVcenterResourcePoolInfo(sessionId, resource_pool_id string) string {
	url := fmt.Sprintf("http://%s/api/vcenter/resource-pool/%s", v.Vsphere_server, resource_pool_id)
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Authorization", "Basic "+basicAuth(v.Vsphere_user, v.Vsphere_password))
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	var pool map[string]interface{}
	if err := json.Unmarshal([]byte(body), &pool); err != nil {
		panic(err)
	}
	return pool["name"].(string)
}

func TestVcenterResourcePool(t *testing.T) {
	vsphereClient := Vsphere{
		Vsphere_server:   os.Getenv("TF_VAR_vsphere_server"),
		Vsphere_user:     os.Getenv("TF_VAR_vsphere_user"),
		Vsphere_password: os.Getenv("TF_VAR_vsphere_password"),
	}
	vsphereSessionId := vsphereClient.createSession()

	bpt := tft.NewTFBlueprintTest(t)

	bpt.DefineVerify(func(assert *assert.Assertions) {
		bpt.DefaultVerify(assert)
		vsphere_resource_pool_id := bpt.GetStringOutput("vsphere_resource_pool_id")
		resourcePoolName := vsphereClient.getVcenterResourcePoolInfo(vsphereSessionId, vsphere_resource_pool_id)
		assert.Equal(resourcePoolName, "terraform-resource-pool-cft-test", "should have the right Resource Pool Name")

	})

	bpt.Test()
}
