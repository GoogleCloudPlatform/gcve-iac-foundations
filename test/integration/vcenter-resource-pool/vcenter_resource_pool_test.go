/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vcenter_resource_pool

import (
	"crypto/tls"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
	"testing"

	"github.com/GoogleCloudPlatform/cloud-foundation-toolkit/infra/blueprint-test/pkg/tft"
	"github.com/stretchr/testify/assert"
)

type ResourcePool struct {
	Name         string `json:"name"`
	ResourcePool string `json:"resource_pool"`
}

func basicAuth(username, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}

func getVsphereSessionID() string {

	url := "https://" + os.Getenv("VSPHERE_SERVER") + "/api/session"
	method := "POST"
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)

	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	req.Header.Add("Authorization", "Basic "+basicAuth(os.Getenv("VSPHERE_USER"), os.Getenv("VSPHERE_PASSWORD")))

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	return strings.ReplaceAll(string(body), "\"", "")
}

func getVsphereResourcePools(sessionId string) *[]ResourcePool {

	url := "https://" + os.Getenv("VSPHERE_SERVER") + "/api/vcenter/resource-pool"
	method := "GET"
	http.DefaultTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)

	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	req.Header.Add("vmware-api-session-id", sessionId)

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	var response []ResourcePool
	if err := json.Unmarshal(body, &response); err != nil {
		panic(err)
	}
	return &response
}

func TestVcenterResourcePool(t *testing.T) {
	sessionId := getVsphereSessionID()

	bpt := tft.NewTFBlueprintTest(t)
	var resource_pool_id string
	bpt.DefineVerify(func(assert *assert.Assertions) {
		bpt.DefaultVerify(assert)
		resource_pool_name := "terraform-resource-pool-cft-test"
		vsphere_resource_pool_id := bpt.GetStringOutput("vsphere_resource_pool_id")
		resoucePools := getVsphereResourcePools(sessionId)
		for _, v := range *resoucePools {
			if v.Name == resource_pool_name {
				resource_pool_id = v.ResourcePool
			}

		}
		assert.Equal(vsphere_resource_pool_id, resource_pool_id, "should have the right Resource Pool Name")
	})

	bpt.Test()
}
