/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

locals {
  base_gcve_agent_endpoint = "https://storage.googleapis.com/gcve-observability-agent/latest/vmware-linux-amd64"
  sa_gcve_monitoring_roles = toset([
    "roles/monitoring.admin",
    "roles/logging.logWriter",
  ])
}

data "template_file" "gcve_monitoring_agent_linux" {
  template = file("${path.module}/scripts/installer.sh")
  vars = {
    endpoint_agent   = "${local.base_gcve_agent_endpoint}/artifacts/bpagent-headless-vmware.tar.gz"
    endpoint_install = "${local.base_gcve_agent_endpoint}/installer/install.sh"
    vsphere_server   = var.vsphere_server
    vsphere_user     = var.vsphere_user
    vsphere_password = var.vsphere_password
    gcve_region      = var.gcve_region
    project_id       = var.project
  }
}

resource "google_project_service" "enable_destination_api" {
  project            = var.project
  service            = "monitoring.googleapis.com"
  disable_on_destroy = false
}

resource "google_service_account" "sa_gcve_monitoring" {
  project    = var.project
  account_id = var.sa_gcve_monitoring
}

resource "google_project_iam_member" "gcve_monitoring_permissions" {
  for_each = local.sa_gcve_monitoring_roles
  role     = each.key
  project  = var.project
  member   = "serviceAccount:${google_service_account.sa_gcve_monitoring.email}"
}

resource "google_compute_instance" "vm_monitoring_gcve" {
  project      = var.project
  name         = var.vm_mon_name
  machine_type = var.vm_mon_type
  zone         = var.vm_mon_zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  metadata_startup_script = sensitive(data.template_file.gcve_monitoring_agent_linux.rendered)

  network_interface {
    subnetwork         = var.subnetwork
    subnetwork_project = var.project
  }

  service_account {
    email  = google_service_account.sa_gcve_monitoring.email
    scopes = ["cloud-platform"]
  }
}

resource "google_monitoring_dashboard" "gcve_mon_dashboards" {
  for_each       = var.create_dashboards ? fileset("${path.module}/dashboards", "*.json") : []
  dashboard_json = file("${path.module}/dashboards/${each.value}")
  project        = var.project
}